# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  tags:
    include:
      - '*'
  branches:
    include:
      - master
      - release/*
      - refs/tags/*
pr:
  - master
  - release/*

jobs:
  - job: pytest
    # how long to run the job before automatically cancelling
    timeoutInMinutes: "45"
    # how much time to give 'run always even if cancelled tasks' before stopping them
    cancelTimeoutInMinutes: "2"

    pool: azure-gpus-spot

    container:
      image: "pytorchlightning/pytorch_lightning:base-cuda-py3.7-torch1.8"
      #endpoint: azureContainerRegistryConnection
      options: "--runtime=nvidia -e NVIDIA_VISIBLE_DEVICES=all"

    workspace:
      clean: all

    steps:

    - bash: |
        lspci | egrep 'VGA|3D'
        whereis nvidia
        nvidia-smi
        python --version
        pip --version
        pip list
      displayName: 'Image info & NVIDIA'

    - bash: |
        python -c "import torch ; mgpu = torch.cuda.device_count() ; assert mgpu >= 2, f'GPU: {mgpu}'"
      displayName: 'Sanity check'

    - bash: |
        # python -m pip install "pip==20.1"
        pip install --requirement ./requirements/devel.txt --upgrade-strategy only-if-needed
        pip list
      displayName: 'Install dependencies'

    - bash: |
        python -m pytest pl_bolts tests -v --cov=pl_bolts --junitxml=$(Build.StagingDirectory)/test-results.xml --durations=30
      displayName: 'Testing'

    - bash: |
        python -m coverage report
        python -m coverage xml
        python -m coverage html
        python -m codecov --token=$(CODECOV_TOKEN) --commit=$(Build.SourceVersion) --flags=gpu,pytest --name="GPU-coverage" --env=linux,azure
        ls -l
      displayName: 'Statistics'

    - task: PublishTestResults@2
      displayName: 'Publish test results'
      inputs:
        testResultsFiles: '$(Build.StagingDirectory)/test-results.xml'
        testRunTitle: '$(Agent.OS) - $(Build.DefinitionName) - Python $(python.version)'
      condition: succeededOrFailed()

#    - task: PublishCodeCoverageResults@1
#      displayName: 'Publish coverage report'
#      inputs:
#        codeCoverageTool: 'Cobertura'
#        summaryFileLocation: '$(Build.SourcesDirectory)/coverage.xml'
#        reportDirectory: '$(Build.SourcesDirectory)/htmlcov'
#        testRunTitle: '$(Agent.OS) - $(Build.BuildNumber)[$(Agent.JobName)] - Python $(python.version)'
#      condition: succeededOrFailed()
